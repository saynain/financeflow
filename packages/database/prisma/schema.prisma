generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  currency      String    @default("USD")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  budgets      Budget[]
  tagBudgets   TagBudget[]
  categories   Category[]
  transactions Transaction[]
  savingsGoals SavingsGoal[]
  portfolios   Portfolio[]
  bankAccounts BankAccount[]
  tags         Tag[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Budget {
  id        String   @id @default(cuid())
  name      String
  amount    Decimal  @db.Decimal(10, 2)
  currency  String   @default("USD")
  period    Period
  startDate DateTime
  endDate   DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]

  @@map("budgets")
}

model TagBudget {
  id        String   @id @default(cuid())
  name      String
  order     Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items TagBudgetItem[]

  @@map("tag_budgets")
}

model TagBudgetItem {
  id           String     @id @default(cuid())
  tag          String
  amount       Decimal    @db.Decimal(10, 2)
  tagBudgetId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  tagBudget TagBudget @relation(fields: [tagBudgetId], references: [id], onDelete: Cascade)

  @@map("tag_budget_items")
}

model Category {
  id          String       @id @default(cuid())
  name        String
  icon        String?
  color       String?
  type        CategoryType
  budgetLimit Decimal?     @db.Decimal(10, 2)
  currency    String       @default("USD")
  budgetId    String?
  userId      String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget       Budget?       @relation(fields: [budgetId], references: [id])
  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")

  @@map("categories")
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal         @db.Decimal(10, 2)
  currency    String          @default("USD")
  type        TransactionType
  description String?
  date        DateTime
  tags        String[]        @default([]) // Array of tag strings
  portfolioId String?
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id])

  @@map("transactions")
}

model SavingsGoal {
  id           String   @id @default(cuid())
  name         String
  targetAmount Decimal  @db.Decimal(10, 2)
  currentAmount Decimal  @default(0) @db.Decimal(10, 2)
  currency     String   @default("USD")
  targetDate   DateTime
  icon         String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings_goals")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        PortfolioType
  currency    String   @default("USD")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccounts BankAccount[]
  transactions Transaction[]

  @@map("portfolios")
}

model BankAccount {
  id          String   @id @default(cuid())
  name        String
  accountType BankAccountType
  accountNumber String?
  routingNumber String?
  institution  String?
  balance     Decimal  @default(0) @db.Decimal(10, 2)
  currency    String   @default("USD")
  isConnected Boolean  @default(false)
  portfolioId String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id])

  @@map("bank_accounts")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?  @default("#6366f1") // Default color
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("tags")
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PortfolioType {
  CHECKING
  SAVINGS
  INVESTMENT
  CRYPTO
  OTHER
}

enum BankAccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  OTHER
}
